<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Lanyon</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-04-02T20:06:41-04:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Mark Otto</name>
   <email>markdotto@gmail.com</email>
 </author>

 
 <entry>
   <title>Mergesort</title>
   <link href="http://localhost:4000/2017/04/02/mergesort/"/>
   <updated>2017-04-02T00:00:00-04:00</updated>
   <id>http://localhost:4000/2017/04/02/mergesort</id>
   <content type="html">&lt;p&gt;Mergesort in JavaScript was a fun algorithm to implement. It was the first algorithm that I coded that wasn’t quadratic in run-time. It seems to me that solving problems with an O(n^2) run-time is easier on the brain, while solving problems in O(n log n) or less requires much more processing power. If only brains and computers could merge… &lt;em&gt;I’m looking at you Elon Musk&lt;/em&gt;. You can check the full source code &lt;a href=&quot;https://github.com/jamesnvk/algorithms-and-data-structures/blob/master/algorithms/mergesort.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mergesort is a staple divide and conquer algorithm. A divide and conquer algorithm is a design pattern that works by recursively breaking a problem down into smaller sub problems until the solutions to the sub problems can be combined to solve the bigger problem. Small problems are easier to solve than big problems, so we can take advantage of two partial solutions to construct a solution to the bigger overall problem.&lt;/p&gt;

&lt;p&gt;Mergesort does this in two (arguably) main steps - first breaking down the array into sub arrays until there is less than 2 elements (which makes it sorted since an array of 1 is automatically sorted), then implementing a merge routine. The main sorting happens during the merge routine, hence the name mergesort. The hardest part was implementing the merge routine. The trick is to keep track of the left and right arrays with pointers, incrementing the pointers as we move across the array in a loop while comparing elements. Once we reach the end of the array, concat the remaining elements in the opposing array and the array should be sorted.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CS Fundamentals Reflection</title>
   <link href="http://localhost:4000/2017/03/10/cs-fundamentals/"/>
   <updated>2017-03-10T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/03/10/cs-fundamentals</id>
   <content type="html">&lt;p&gt;I wanted to write a short blog post reflecting on the knowledge I’ve gained by working through an &lt;a href=&quot;https://github.com/jamesnvk/algorithms-and-data-structures&quot; target=&quot;_blank&quot;&gt;algorithms and data structures workshop&lt;/a&gt;. I don’t have a traditional CS degree, so I’m currently drinking the firehose of CS fundamentals - learning four semesters worth of material in a few months time is challenging but extremely rewarding.&lt;/p&gt;

&lt;p&gt;Mastering a craft isn’t easy, and I realized that in order to be a well rounded software engineer I need to obtain a solid foundation on the basics of algorithms and data structures. Flatiron School taught me how to learn and program &lt;em&gt;effectively&lt;/em&gt;, so now I’m in the process of acquiring the skills to solve problems &lt;em&gt;both&lt;/em&gt; &lt;em&gt;efficiently&lt;/em&gt; and effectively.&lt;/p&gt;

&lt;p&gt;I’ve also learned that understanding how to approach a problem is an underrated skill as well. Problems always have two specific parts: a set of allowed inputs and the required properties of its output. I learned that having this model, then walking through the problem by breaking it down into smaller, more manageable parts, is a great way to approach most problems.&lt;/p&gt;

&lt;p&gt;I’m very grateful to have learned two different programming paradigms early on in my career. Understanding the ins-and-outs of an object oriented programming language with Ruby, then moving to a functional language like JavaScript has really opened my eyes to the vast amounts of different patterns and approaches people can take whether its solving a simple problem or building a production level application at scale.&lt;/p&gt;

&lt;p&gt;Since graduating, my thirst for learning and growth hasn’t stopped. I think it has actually increased. I know I chose the right path, because its starting to feel like the beginning of a long and exciting career.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out my github &lt;a href=&quot;https://github.com/jamesnvk/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ES6 Initial Impression</title>
   <link href="http://localhost:4000/2017/03/03/es6-initial-impression/"/>
   <updated>2017-03-03T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/03/03/es6-initial-impression</id>
   <content type="html">&lt;p&gt;One of the main reasons I am so excited to continue learning to master Javascript is the constant evolution of the language. The popularity of the Angular and React frameworks have shown us that this language is here to stay. &lt;a href=&quot;https://github.com/lukehoban/es6features&quot; target=&quot;_blank&quot;&gt;ES6&lt;/a&gt; is the latest version of the language and has come with some significant updates.&lt;/p&gt;

&lt;p&gt;The first thing that caught my attention and probably many others, was the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; target=&quot;_blank&quot;&gt;arrow function&lt;/a&gt;. My initial impression on this: not a fan. There seems to be many different syntax use cases for it that can get quite confusing if someone is not familiar. Yes, I could learn all the syntax cases but the trade off is another mental tax when reading code when I could’ve just simply typed &lt;code&gt;function&lt;/code&gt;. What I do like about the arrow function, however, is the fact that you don’t have to worry about the &lt;code&gt;this&lt;/code&gt; binding. For example, instead of using a common lexical scoping hack such as &lt;code&gt;var self = this&lt;/code&gt; to grab context for another function, the &lt;code&gt;this&lt;/code&gt; binding is &lt;em&gt;implicitly&lt;/em&gt; lexical with the arrow.&lt;/p&gt;

&lt;p&gt;An ES6 update that I am a fan of are the new &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; &lt;a href=&quot;https://github.com/lukehoban/es6features#let--const&quot; target=&quot;_blank&quot;&gt;declarations&lt;/a&gt;. These are block-scoped binding constructs. The &lt;code&gt;let&lt;/code&gt; keyword enforces what we have already been doing stylistically with var. For example, putting a &lt;code&gt;var&lt;/code&gt; inside an &lt;code&gt;if&lt;/code&gt; block - that &lt;code&gt;var&lt;/code&gt; is still accessible to the entire scope, but it makes sense to put it there for another developer to see that that &lt;code&gt;var&lt;/code&gt; is meant to be used for that &lt;code&gt;if&lt;/code&gt; statement. The &lt;code&gt;const&lt;/code&gt; keyword is simply a variable that cannot be changed (a getter). I don’t think that just because &lt;code&gt;let&lt;/code&gt; is now in the language that we should get rid of &lt;code&gt;var&lt;/code&gt;. Both have their place in code and I prefer to write &lt;code&gt;let&lt;/code&gt; when I know I want my variable blocked - such as in a &lt;em&gt;for loop&lt;/em&gt;, or in that earlier example with the if statement.&lt;/p&gt;

&lt;p&gt;Overall I think Javascript is moving in a great direction with these changes. As I learn and start incorporating more ES6 features in my code I will continue to update this blog with my thoughts. Stay tuned!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out my github &lt;a href=&quot;https://github.com/jamesnvk/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Advanced JavaScript - new</title>
   <link href="http://localhost:4000/2017/02/23/advanced-js-new/"/>
   <updated>2017-02-23T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/02/23/advanced-js-new</id>
   <content type="html">&lt;p&gt;Since I just wrote up a &lt;a href=&quot;https://jamesnvk.github.io/2017/02/16/advanced-js-this/&quot;&gt;blog post on the this keyword&lt;/a&gt;, I figured I would round up some knowledge on &lt;code&gt;new&lt;/code&gt;. The &lt;code&gt;new&lt;/code&gt; keyword does have some built in ties to &lt;code&gt;this&lt;/code&gt; that I want to illuminate, but I also want to clarify some misconceptions about &lt;code&gt;new&lt;/code&gt; in the world of JavaScript.&lt;/p&gt;

&lt;p&gt;One common misconception in JavaScript is that when we are calling &lt;code&gt;new&lt;/code&gt; we are instantiating a new object from some sort of class. Instead, what we are really doing here is &lt;em&gt;constructing&lt;/em&gt; a brand new object, then attaching whatever properties our &lt;em&gt;function constructor&lt;/em&gt; has. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;foo&lt;/code&gt; is lowercase. This is to illustrate the point that even though we typically see function constructors start with a capital letter, that is simply just a convention to let other developers know that the function is meant to be used as a constructor.&lt;/p&gt;

&lt;p&gt;So what exactly happened when we called &lt;code&gt;new foo()&lt;/code&gt;? Just like the &lt;a href=&quot;https://jamesnvk.github.io/2017/02/16/advanced-js-this/&quot;&gt;4 rules of this&lt;/a&gt;, &lt;code&gt;new&lt;/code&gt; has some rules as well. Can you guess how many rules there are for &lt;code&gt;new&lt;/code&gt;? If you said 4, you are correct! Let us run through what happens when we invoke a function with &lt;code&gt;new&lt;/code&gt; in front of it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;A brand new object is created (or constructed) out of thin air.&lt;/li&gt;
    &lt;li&gt;That object is attached to the function’s &lt;em&gt;prototype&lt;/em&gt;.&lt;/li&gt;
    &lt;li&gt;That object is set as the &lt;code&gt;this&lt;/code&gt; binding for the function call.&lt;/li&gt;
    &lt;li&gt;Unless the function has a return value of an alternate object, it implicitly returns &lt;code&gt;this&lt;/code&gt; (the newly constructed object)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt; isn’t some magical class oriented keyword. Understanding the core functions and principles of JavaScript can really open up the language in many ways.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out my github &lt;a href=&quot;https://github.com/jamesnvk/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Advanced JavaScript - this</title>
   <link href="http://localhost:4000/2017/02/16/advanced-js-this/"/>
   <updated>2017-02-16T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/02/16/advanced-js-this</id>
   <content type="html">&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword in JavaScript seems to be one of the most confusing mechanisms in the entire language. It is often compared to &lt;code&gt;self&lt;/code&gt; in Ruby, which is a completely false comparison. In this blog post I am going to break down why that is, and how developers can effectively leverage the use of &lt;code&gt;this&lt;/code&gt; instead of sit and wonder why things are breaking.&lt;/p&gt;

&lt;p&gt;At its core, &lt;code&gt;this&lt;/code&gt; is a run-time binding. In other words, it is a binding that is made when a function is invoked, and what it references is determined by the &lt;em&gt;callsite&lt;/em&gt; of the function. The &lt;em&gt;callsite&lt;/em&gt; is the place in code where a function gets executed. Every function, while executing, has a reference to its current execution context, called &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are 4 main rules to follow when we think about &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Was the function called with &lt;code&gt;new&lt;/code&gt;? If yes, &lt;code&gt;this&lt;/code&gt; is that object.&lt;/li&gt;
    &lt;li&gt;Was the function called with &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply()&lt;/code&gt;? If yes, use the passed in &lt;code&gt;this&lt;/code&gt; argument.&lt;/li&gt;
    &lt;li&gt;Was the function called with a containing object? If yes, use that object.&lt;/li&gt;
    &lt;li&gt;Default: fall back to global context, unless in &lt;code&gt;strict&lt;/code&gt; mode.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s it! These rules are in order of precedence, so the &lt;code&gt;new&lt;/code&gt; keyword will always overwrite a containing object. The big take away here if you want to determine &lt;code&gt;this&lt;/code&gt; is to focus on the callsite, then ask yourself those 4 rules.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out my github &lt;a href=&quot;https://github.com/jamesnvk/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Advanced JavaScript - Scope</title>
   <link href="http://localhost:4000/2017/01/15/advanced-js-scope/"/>
   <updated>2017-01-15T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/01/15/advanced-js-scope</id>
   <content type="html">&lt;p&gt;I have an obsession with learning, especially when it is something I want to master. I am currently reading &lt;em&gt;You Don’t Know JS&lt;/em&gt; by Kyle Simpson. So far this book has really helped me solidify my understanding of what is &lt;em&gt;really&lt;/em&gt; going on under the hood in the JavaScript engine. It’s been so helpful that I actually decided to put down the money for a monthly subscription to his Frontend Masters curriculum. Today I’m going to be covering the basics of scope in JS. If you would like to read more, I highly recommend checking out his book (it’s free on &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;What is scope? I like to think of scope as a bubble. There can be objects, functions, and even other bubbles inside this bubble, but bubbles never overlap - meaning each bubble has its own “environment”. You can create a bubble by declaring a function, which in technical terms means authoring a &lt;em&gt;function declaration&lt;/em&gt;. Contrast this with authoring a &lt;em&gt;function expression&lt;/em&gt;, which is treated differently by the JavaScript compiler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since JavaScript treats its functions as first class citizens, any function that is &lt;em&gt;declared&lt;/em&gt; will get precedence over other variables that are declared with the same name. It also means that if I decided to call foo() at the top of the file, it would behave as expected, unlike a call to bar, which I will explain below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contrary to popular belief, JavaScript is actually a compiled language.&lt;br /&gt;
&lt;code&gt;var a = 2;&lt;/code&gt; 
How does this code work? It may seem simple, and most people that are coming from different languages (including myself, I started out learning Ruby) will look at that code and think it is executed as a single statement. That is actually incorrect in JavaScript. When the compiler first encounters &lt;code&gt;var a&lt;/code&gt; it asks our current scope or bubble if variable a already exists - if it does, our compiler ignores the statement, if it doesn’t it creates a new variable in the current bubble. &lt;strong&gt;Remember that when a new variable is created initially its value is set to undefined.&lt;/strong&gt; Once our compiler is done compiling code, our engine then handles the &lt;code&gt; a = 2 &lt;/code&gt; assignment during run time. The engine comes across a = 2 and asks our current bubble, do you have a variable a? The bubble responds yes, hands the variable a off to engine and engine assigns it to the value 2.&lt;/p&gt;

&lt;p&gt;What happens when our bubble doesn’t have the variable the engine is asking for? It looks for it outside of its current bubble (if its not in global, of course). The process repeats until it finally reaches the global scope and if it does not find the variable, the result is an error. However, there is a gotcha. If a variable is being &lt;em&gt;assigned&lt;/em&gt;: for example there’s this following code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;during run time and it reaches global scope, global scope will &lt;strong&gt;create a new variable&lt;/strong&gt; for us to use. As you can imagine, this will most likely lead to a whole bunch of nightmare situations. This is why a lot of developers advocate the use of “use strict”; on top of the source file to prevent this situation from ever happening.&lt;/p&gt;

&lt;p&gt;I thought it seemed like a lot to take in at first, coming from a dynamic language like Ruby. There is also a whole set of details that I did not cover here that includes compiler terminology like “LHS” and “RHS” when our engine handles the code. But as I’m learning more and more about how JavaScript really works, the language is starting to grow on me. Even though I develop primarily in Angular, I’m confident that I have the necessary foundational skillset that will allow me pickup any future JS framework and hit the ground running.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for my latest project on github &lt;a href=&quot;https://github.com/jamesnvk/openhealth&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Managing Authorization - and Usability - in Rails/AngularJS Part 1</title>
   <link href="http://localhost:4000/2016/12/25/authorization-usability-railsangular/"/>
   <updated>2016-12-25T00:00:00-05:00</updated>
   <id>http://localhost:4000/2016/12/25/authorization-usability-railsangular</id>
   <content type="html">&lt;p&gt;I am currently helping build an employee training application for a busy restaurant with two other developers on a Rails backend with an AngularJS front end. So far this project has allowed me to leverage my experience in management to help offer insight on effective and efficient ways to help train the staff of a company with high turnover. It has also got me thinking more deeply about authorization and how managers will be interacting with the application.&lt;/p&gt;

&lt;p&gt;An easy UI allows both management and their employees to focus on what’s important, instead of being bogged down by tasks or questions that are repeatedly asked about. I intend to read the book &lt;em&gt;Don’t Make Me Think: A Common Sense Approach to Web Usability&lt;/em&gt; by Steve Krug as it seems to be highly recommended. The title makes sense for the project. A restaurant is a fast paced environment where employees simply &lt;em&gt;do not have the time&lt;/em&gt; to think. They simply just &lt;em&gt;do&lt;/em&gt;. Making the application as simple and easy to use is our primary goal. On to authorization.&lt;/p&gt;

&lt;p&gt;I decided to go with CanCan for authorization. CanCan is a Ruby library that restricts what resources and their actions a given user is allowed to access. These permissions are defined in a single location - the &lt;code&gt;Ability&lt;/code&gt; class. CanCan also requires some type of current_user. We have implemented Devise to handle all of our authentication.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Part 2 coming soon!
If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for my latest project on github &lt;a href=&quot;https://github.com/jamesnvk/openhealth&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Graduating Flatiron School and the Future</title>
   <link href="http://localhost:4000/2016/10/14/graduating-flatiron-school/"/>
   <updated>2016-10-14T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/10/14/graduating-flatiron-school</id>
   <content type="html">&lt;p&gt;As I wrapped up my final project it began to dawn on me that I am soon going to be in the workforce starting a new career as a professional developer. I have come from learning how to set simple variables to making complex ajax requests through APIs in front-end frameworks. The curriculum did an excellent job at consistently pushing the edge of my knowledge. I couldn’t have asked for a more fast-paced and challenging experience. Even though the online curriculum is considered self-paced, I felt that that actually gave me an advantage over the in-person experience. Yes, I was still drinking through the firehose, but it gave me an opportunity to pause and reflect on particular concepts that were giving me a hard time. I learned how to go outside of the ‘walled garden’ of the platform and look up explanations from different sources and experienced developers that taught me different ways of doing things.&lt;/p&gt;

&lt;p&gt;I learned that, just as in life, learning in this profession is never ending. A developer with a thirst to learn will always be in high demand in a market with emerging technologies seemingly every 2-3 years. I learned that ‘imposter syndrome’ is a very real thing. There were many times where I felt like I ‘wasnt smart enough’ or I felt like it was ‘too difficult for me to learn’. Yes, programming is difficult.. but that’s why it is in high demand. There are not many people that have the skillset that we do, and I’d like to thank Flatiron for giving me the opportunity to show the world and give back what I learned by providing all the value I possibly can to whichever company I decide to work for in the future. There have been so many ups and downs when I started this journey almost exactly one year ago to this day and I have not regretted a single moment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for my latest project on github &lt;a href=&quot;https://github.com/jamesnvk/openhealth&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>AngularJS Single Page Application with Rails API backend</title>
   <link href="http://localhost:4000/2016/10/07/angularjs-spa-rails-api/"/>
   <updated>2016-10-07T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/10/07/angularjs-spa-rails-api</id>
   <content type="html">&lt;p&gt;AngularJS is a JavaScript based front-end framework developed by Google for the purpose of addressing the many challenges that come with single page applications. It follows MVVM (Model-View-ViewModel) as opposed to the classic MVC (Model-View-Controller) architecture that I began learning early in my journey as a software developer.&lt;/p&gt;

&lt;p&gt;As part of this project I was tasked with building out dynamic updating of a single field of a resource. Ex: Allow changing of quantity in a shopping cart. This blog post will cover a particular problem I came across while I built this feature out.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Angular-xeditable&lt;/code&gt; is a bundle of angular directives that allows you to create editable elements. This technique is also known as ‘edit-in-place’. You can view the docs &lt;a href=&quot;https://vitalets.github.io/angular-xeditable/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. This bundle is a great example of why Angular is such a fun and familiar framework, it reminds me of injecting ruby gems into a Rails application.&lt;/p&gt;

&lt;p&gt;After spending some time in the docs I decided to implement the form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see here we have a simple form that displays the healthcare providers’ location OR if there is no location “empty” inside of a span tag. When the user clicks to edit the form, a text box will pop up with the “location” text inside of it, prompting the user to edit the text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss16.png&quot; alt=&quot;Alt text&quot; /&gt; &lt;img src=&quot;/assets/ss17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After “save” is clicked, instead of utilizing &lt;code&gt;ng-submit&lt;/code&gt; we are using the &lt;code&gt;onaftersave&lt;/code&gt; directive which calls my &lt;code&gt;editProvider&lt;/code&gt; function in my controller with the passed in provider ID as a parameter. The function then calls on my provider service to send a PATCH with the json data for that specific provider and updates the database. Now at this point you’re probably thinking this is way too straightforward… there has to be a catch. You are correct!&lt;/p&gt;

&lt;p&gt;The main challenge here was looking up the correct provider object by id. Since our application is a single page, all of the providers are listed through an array, which we call &lt;code&gt;ng-repeat&lt;/code&gt; on to iterate and display each provider’s data. Throw in filters and different search results and the server has no idea what the correct object is without its specific id if a user wanted to edit a provider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here I created a lookup object. It sets a key id for each provider’s id in the array to the provider object itself as the value. To grab the object, I then set a variable &lt;code&gt;provider&lt;/code&gt; equal to accessing the &lt;code&gt;lookup&lt;/code&gt; object by passing in the id we obtained from the view. Then simply pass the &lt;code&gt;provider&lt;/code&gt; variable into our service and the correct provider is updated!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;i&gt;I learned so much about modern web application development from building this SPA. This was definitely the most challenging part of the curriculum for me. If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for this project on github &lt;a href=&quot;https://github.com/jamesnvk/openhealth&quot;&gt;here&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RailsJS jQuery Front End - Handlebars</title>
   <link href="http://localhost:4000/2016/09/13/railsjs-jquery-front-end/"/>
   <updated>2016-09-13T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/09/13/railsjs-jquery-front-end</id>
   <content type="html">&lt;p&gt;It’s been a while since my last blog post but I’m back at it again with another new app! This time I built a Pinterest style app utilizing javascript/jQuery and HandlebarsJS to handle the front end while Rails took care of the back end. If you’re unfamiliar with Handlebars I recommend you take a quick look at the &lt;a href=&quot;http://handlebarsjs.com/&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; before proceeding.&lt;/p&gt;

&lt;p&gt;A high level overview of how Handlebars works is that it basically gives us templates that we insert into our HTML pages that we want to use our API with. Then we can use javascript to call and insert objects from the database directly into the DOM without a page refresh. Lets start by taking a look at our template in our HTML:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see here that this looks almost like an ERB file. In fact, this is basically ERB for javascript. Since we are still in an actual ERB file we can still use ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= current_user.name %&amp;gt;&lt;/code&gt; and javascript &lt;code class=&quot;highlighter-rouge&quot;&gt;[[content]]&lt;/code&gt;* at the same time. Pretty cool.&lt;/p&gt;

&lt;p&gt;*&lt;i&gt;Markdown doesnt like the curly braces so we have to use brackets&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Next lets create a constructor in javascript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here our Comment belongs_to a user and has the attributes id, content, and user_id. After we set this up, next we need to build a function on this prototype that will return the HTML for the page we have our script in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’re probably wondering what the &lt;code class=&quot;highlighter-rouge&quot;&gt;.template&lt;/code&gt; method is on our Comment. First, we need to grab the template (an HTML string). Then, if you recall from the documentation we need to &lt;em&gt;compile&lt;/em&gt; our HTML string into an actual handlebars template.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What this now allows us to do is inject our object’s properties using that mustache syntax into our DOM via our compiled template!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;i&gt;Getting the opportunity to build this was an amazing learning experience. This was definitely one of the most challenging parts of the curriculum for me. If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for this project on github &lt;a href=&quot;https://github.com/jamesnvk/pinterest&quot;&gt;here&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RESTful Rails Blog with OAuth</title>
   <link href="http://localhost:4000/2016/07/02/restful-rails-blog-with-oauth/"/>
   <updated>2016-07-02T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/07/02/restful-rails-blog-with-oauth</id>
   <content type="html">&lt;p&gt;I decided to build a fully functional blog application from the ground up for my Rails assessment project at Flatiron School. It was the biggest challenge I’ve faced since starting my journey into programming. I feel like I have come so far in the world of programming, yet at the same time barely scratching the surface. That is awesome. Steep learning curves excite me.&lt;/p&gt;

&lt;p&gt;One of the most challenging sprints of this project was building out the comments system. My User model looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Post model:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and my comment model acting as a join:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My problem was that I needed to be able to add a comment - from a user - to a particular post. I spent a lot of time trying to create a comment through the posts controller until I realized that even though my comments model was a join table, I still needed to build the comments controller to separate concerns. Even though a comment belongs to a post, a post controller should not have the responsibility of creating a comment. A comment is still a valid object in my program that deserves attention just as much as a User or Post.&lt;/p&gt;

&lt;p&gt;Here’s how my comments controller turned out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My next challenging sprint was the implementation of Oauth using facebook as a provider. &lt;a href=&quot;https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview&quot;&gt;This guide&lt;/a&gt; is an excellent step by step walkthrough on how to implement Oauth via facebook. One important thing to note about this was that I had trouble with my APP ID consumer key and secret key. A bug prevented me from being able to set my keys through my environment, so I had to add both keys to my project. It is extremely important that these keys, especially the secret key, is not in public view, ie. in the git source code.&lt;/p&gt;

&lt;p&gt;To take care of this problem I added a file in my &lt;code&gt;config/initializers&lt;/code&gt; folder that contained both keys as constants, then added that file to my .gitignore file so it would not get uploaded as public source code on github. I realize that this may not be an optimal solution as all code is still uploaded to a server.&lt;/p&gt;

&lt;p&gt;My last sprint that I wanted to discuss was building a REST infrastructure. A design decision I made early on was to rename the &lt;code&gt;PostsController&lt;/code&gt; to &lt;code&gt;InjuriesController&lt;/code&gt; because I wanted my routes to be &lt;code&gt;/injuries&lt;/code&gt;, &lt;code&gt;/injuries/new&lt;/code&gt; etc.. but quickly realized that that design decision may be confusing as the app gets larger. I’ve learned that it is usually better to err on the side of convention when it comes to Rails development. So instead, I kept &lt;code&gt;PostsController&lt;/code&gt; and passed an option to &lt;code&gt;resources&lt;/code&gt; in my routes file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ss10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;i&gt;I had an awesome time and learned so much while building this app. If you like what you read you can check out my previous posts listed in my &lt;a href=&quot;https://jamesnvk.github.io/archives/&quot;&gt;archive&lt;/a&gt;. Or you can check out the full source code for this project on github &lt;a href=&quot;https://github.com/jamesnvk/injury-door&quot;&gt;here&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Why software?</title>
   <link href="http://localhost:4000/2016/06/04/why-software/"/>
   <updated>2016-06-04T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/06/04/why-software</id>
   <content type="html">&lt;p&gt;I’ve put in over 600 hours since I started to learn how to code back in November when I got accepted into Flatiron School. I have to say that after I put in that amount of time I still feel like I am just scratching the surface. That’s not necessarily a bad thing, though, as things that are generally worth achieving almost always seem to have a steep learning curve. Pro athletes, pilots, musicians, physicians and actors all have one thing in common – they practice. Then they practice more. And more. And more. Until one day they find that the skill they are practicing on a consistent basis becomes a habit, which then becomes valuable enough to the world that people are willing to pay them lots of money. They become a professional.&lt;/p&gt;

&lt;p&gt;So… why software? It’s the money… right? Software engineers make an above average living working in such a high demand field. If this was about the money I would have quit a long time ago. Flatiron School’s online curriculum is self-paced, which means the only person that will motivate you to keep pushing through those late nights coming home after work - staring into the abyss of failing tests - is yourself.&lt;/p&gt;

&lt;p&gt;I’m willing to bet most people who were at the mastery level of their game aren’t going to look back at their life and say “I made $X amount of dollars during that year!” when asked the question “What did you enjoy most about your career?”&lt;/p&gt;

&lt;p&gt;I’m not saying that setting goals for yourself to earn a great living is a bad thing. What I am saying is this: the process of mastering a craft itself is something that money can’t buy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sinatra ActiveRecord MVC Application</title>
   <link href="http://localhost:4000/2016/03/27/sinatra-ar-mvc-app/"/>
   <updated>2016-03-27T00:00:00-04:00</updated>
   <id>http://localhost:4000/2016/03/27/sinatra-ar-mvc-app</id>
   <content type="html">&lt;p&gt;I’ve learned a ton since I built my first CLI gem in my last project. Flatiron School’s Full Stack Dev curriculum really knows how to keep us just on the edge of our knowledge - Always challenging and I’m absolutely addicted. This project’s requirements are as follows:&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;REQUIREMENTS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Build an MVC Sinatra Application.&lt;/li&gt;
  &lt;li&gt;Use ActiveRecord with Sinatra.&lt;/li&gt;
  &lt;li&gt;Use Multiple Models.&lt;/li&gt;
  &lt;li&gt;Use at least one has_many relationship&lt;/li&gt;
  &lt;li&gt;Must have user accounts. The user that created the content should be the only person who can modify that content&lt;/li&gt;
  &lt;li&gt;Models must have validations to ensure that bad data isn’t created&lt;/li&gt;
  &lt;li&gt;Any validation failures must be shown to user with an error message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided I wanted to build a game collection app that keeps track of a users games. When I was younger (the days before Steam was a thing) I had a ton of games on PC/DVD, SNES, N64 and no where to keep track of them! My first task is to determine file structure, more importantly.. which gems I will be needing to create this app. &lt;img src=&quot;/assets/ss1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next let’s build out the models. A User &lt;code&gt;has many&lt;/code&gt; games and a Game &lt;code&gt;belongs to&lt;/code&gt; a user. We’re being taught that starting out with the models first is a great pattern for building web apps from scratch. This way we can directly interact with our data first before committing to building out the larger portion of the framework like the controllers and routing. We can always come back to add attributes or functionality to the models in the future as well.&lt;/p&gt;

&lt;p&gt;Now let’s setup our database. We have to create 2 tables, one for users and one for games. We’re going to run &lt;code&gt;rake db:create_migration NAME=create_users&lt;/code&gt; and do the same for games. Our code in our migration file will look like this: &lt;img src=&quot;/assets/ss2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re creating 3 columns for our 3 attributes: Games have a name, year, and a foreign key: &lt;code&gt;user_id&lt;/code&gt; since games &lt;code&gt;belong_to&lt;/code&gt; a User. We’ll do the same for Users then run &lt;code&gt;rake db:migrate&lt;/code&gt; to execute the changes. After our tables are setup we’ll need to add our 2 models to our app. &lt;img src=&quot;/assets/ss3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our tables and models setup and migrated our Users and Games are now associated. Remember that the model that has belongs_to will always have the foreign key. In this case, our Game model has the foreign key &lt;code&gt;user_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the User class. We’re &lt;code&gt;include&lt;/code&gt;ing instance method &lt;code&gt;slug&lt;/code&gt; that will take a user’s username, downcase it, and replace all spaces with dashes. That’s the beauty of ruby.. we can just look at the method and know exactly what it does. The purpose of this method is to have our URLs remain RESTful. Next we’re &lt;code&gt;extend&lt;/code&gt;ing our class method &lt;code&gt;find_by_slug&lt;/code&gt; that will give us the ability to find a user by their slugified name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;has_secure_password&lt;/code&gt; is a macro given to us by ActiveRecord. However in order to use this we will need to have &lt;code&gt;sessions&lt;/code&gt; enabled and also our gem &lt;code&gt;bcrypt&lt;/code&gt; that we installed earlier. &lt;code&gt;Bcrypt&lt;/code&gt; gives us the ability to store a salted and hashed version of a user’s password in a database column called &lt;code&gt;password_digest&lt;/code&gt;. Let’s add that now.  &lt;img src=&quot;/assets/ss4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To wrap up user auth we are given a method &lt;code&gt;authenticate&lt;/code&gt; that is provided to us by the Bcrypt gem, which takes a string as an argument. If the string password matches the string password in the password digest, it will return the user object, otherwise it will return false. &lt;img src=&quot;/assets/ss5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We ensure that bad data isn’t being passed with our helper methods &lt;code&gt;logged_in?&lt;/code&gt; which evaluates the truthiness of a session[:id] and &lt;code&gt;empty_field?&lt;/code&gt; which ensures that a user fills out all form fields when logging in or signing up. Since the our session hash persists across our URLs, it is a very useful tool allowing a web app to persist a user across the entire scope of the application. In other words, the user does not have to log in every time they request a new page. This introduces “state” in an otherwise stateless web. Check out all of my controller routes and actions on my full &lt;a href=&quot;https://github.com/jamesnvk/game-collection-sinatra-app&quot;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our last requirement I decided to use the flash gem found &lt;a href=&quot;https://github.com/SFEley/sinatra-flash&quot;&gt;here&lt;/a&gt;. This cool little gem adds an error message for the user when they fail a validation.&lt;/p&gt;

&lt;p&gt;##Conclusion&lt;/p&gt;

&lt;p&gt;I learned a ton about how the web operates doing this project. It was a lot of work and I’m glad that I’m learning a basically smaller version of Rails before moving onto the behemoth. Feel free to send me an email jamesnovak90@gmail.com I’d love to hear from you!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building a CLI Gem</title>
   <link href="http://localhost:4000/2016/01/27/jamesnovak-cli-gem/"/>
   <updated>2016-01-27T00:00:00-05:00</updated>
   <id>http://localhost:4000/2016/01/27/jamesnovak-cli-gem</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  My first Ruby CLI Gem: Train Hard
&lt;/div&gt;

&lt;p&gt;My idea for this gem is fairly straightforward. It is a command line interface that scrapes from a website that lists exercises by muscle groups. Each muscle has many exercises. Each exercise belongs to a muscle.&lt;/p&gt;

&lt;p&gt;The first order of business is to bust out the notepad and organize the project into small bite sized pieces. Here’s what I got (shoutout to Avi ;))&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Plan your gem, imagine your interface&lt;/li&gt;
  &lt;li&gt;Start with the project structure - google&lt;/li&gt;
  &lt;li&gt;Start with the entry point  - the file run&lt;/li&gt;
  &lt;li&gt;Stub out the interface&lt;/li&gt;
  &lt;li&gt;Start making things real. Discover objects. PROGRAM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alright! Lets get started shall we?&lt;/p&gt;

&lt;h2 id=&quot;1-plan-your-gem-imagine-your-interface&quot;&gt;1. Plan your gem, imagine your interface&lt;/h2&gt;

&lt;p&gt;A CLI seems like a fairly simple idea. The program asks a user a question, and the user responds to the question with the correct input. So when we first run our gem we want to ask our user an important question (one which they want to be asked since they installed the gem, and one that is concise and to the point.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Which muscle group are you training today?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;gets.strip&lt;/code&gt; we can determine by number, which muscle group a user wants to see exercises for, then display that list to the user. We will of course list those muscle groups by number.&lt;/p&gt;

&lt;h2 id=&quot;2-start-with-the-project-structure&quot;&gt;2. Start with the project structure&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bundle gem train_hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Magic! We now have a brand new directory with all of our necessary files to create a gem.&lt;/p&gt;

&lt;h2 id=&quot;3-start-with-the-entry-point&quot;&gt;3. Start with the entry point&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;bin&lt;/code&gt; directory is where we want to encapsulate all of our code into a simple call to execute our program. It seems to be best practice not to place logic in this directory. I added &lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt; to tell the interpreter that this is a ruby file. I also added &lt;code&gt;require './lib/train_hard'&lt;/code&gt; since we will be needing our &lt;code&gt;cli.rb&lt;/code&gt; class to run the file.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;lib&lt;/code&gt; directory is where the meat of the program lies. We have a file called &lt;code&gt;train_hard.rb&lt;/code&gt; that is responsible for loading all the required files including our &lt;code&gt;nokogiri&lt;/code&gt; gem and &lt;code&gt;open-uri&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-stub-out-the-interface&quot;&gt;4. Stub out the interface&lt;/h2&gt;

&lt;p&gt;Our program should start just by running &lt;code&gt;./bin/train_hard&lt;/code&gt; command. Inside our bin/train_hard file we should only have code that looks like this to encapsulate our logic and run our program&lt;/p&gt;
&lt;div class=&quot;message&quot;&gt;
#!/usr/bin/env ruby&lt;br /&gt;

require &quot;bundler/setup&quot;&lt;br /&gt;
require &quot;train_hard&quot;&lt;br /&gt;

TrainHard::CLI.new.start
&lt;/div&gt;

&lt;p&gt;Our first method that is going to be run in our CLI is our &lt;code&gt;display_menu&lt;/code&gt; method which displays a menu for the user to choose which muscle group they would like exercises for. For now, we are going to hard-code our method just to be able to have a visualization of what the program will look like before it becomes real. For example
&lt;code&gt;puts &quot;Which muscle group are you training today? (enter number):&quot;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;
def display_menu&lt;br /&gt;
  puts &quot;Which muscle group are you training today?:&quot;&lt;br /&gt;
  puts &amp;lt;&amp;lt;-DOC&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Chest&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Back&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Legs&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Shoulders&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Abs&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Arms&lt;br /&gt;
    DOC&lt;br /&gt;
   end
 &amp;lt;/code&amp;gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s do the same for our &lt;code&gt;pick&lt;/code&gt; method, which will &lt;code&gt;gets&lt;/code&gt; from a user to enter the number which they would like to train, then based on that number display that muscle’s exercises. Example:&lt;br /&gt;
&lt;code&gt;
  def pick&lt;br /&gt;
    input = nil&lt;br /&gt;
    while input != &quot;exit&quot;&lt;br /&gt;
    puts &quot;Enter number of the muscle you would like to train or type menu to display menu:&quot; &lt;br /&gt;
    input = gets.strip &lt;br /&gt;
      case input &lt;br /&gt;
      when &quot;1&quot; &lt;br /&gt;
      puts &quot;Exercises for 1&quot; &lt;br /&gt;
      etc...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our code stubbed lets start actually programming!&lt;/p&gt;

&lt;h2 id=&quot;5-start-making-things-real-discover-objects-program&quot;&gt;5. Start making things real. Discover objects. PROGRAM&lt;/h2&gt;

&lt;p&gt;The fun part! The first thing we have to do is figure out what exactly a “muscle” consists of, and what our &lt;code&gt;muscle class&lt;/code&gt; is going to do for us. 
What is a “muscle” ?
What is an “exercise” ?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A muscle has a name&lt;/li&gt;
  &lt;li&gt;A muscle has many exercises.&lt;/li&gt;
  &lt;li&gt;An exercise belongs to a muscle.
These can be represented here in &lt;code&gt;class Muscle&lt;/code&gt;: &lt;code&gt;attr_accessor :name, :exercises&lt;/code&gt;.&lt;br /&gt;
&lt;code&gt; class Exercise &lt;/code&gt; &lt;br /&gt;
&lt;code&gt; attr_accessor :name, :muscle &lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next we want to be able to build a muscle object by scraping it off of a website. Our goal is to find all the muscles we want to include and for each muscle, create a muscle instance. To do this we are going to need a separate &lt;code&gt;Scaper&lt;/code&gt; class, since a muscle class’s responsibility is to create instances of muscles, not scrape information. In our scraper class we are going to define a &lt;code&gt;get_page&lt;/code&gt; method and setup our &lt;code&gt;Nokogiri&lt;/code&gt; with our index url. Read more about Nokogiri and open-uri &lt;a href=&quot;http://ruby.bastardsbook.com/chapters/html-parsing/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our scraper is going to be split into 2 parts. First we will want to scrape the index page for all the muscles that are available. Then we will want to dive deeper and scrape the exercises within those muscle pages. So our first method will just scrape the index page for all the muscle titles, get just the text from those titles and push those strings into an array. Here is the code to accomplish this: &lt;code&gt;self.get_page.css('.muscle-pagination li')[0].text,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that we are calling the get_page method within &lt;code&gt;scrape_muscles_index&lt;/code&gt; to parse the HTML page, then retrieve the specific text from the HTML and push that string into an array. We will be doing the same thing for the exercises, but since there are a lot of exercises we need to add another process.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;self.get_page.css('.exerciseName h3 a').collect {|exercise| exercise.text.strip!}&lt;/code&gt; Here we are collecting all of the exercises listed on the page (just the text), then using the &lt;code&gt;strip!&lt;/code&gt; method to remove any trailing and leading whitespace, then push that array of strings into a separate array.&lt;/p&gt;

&lt;p&gt;Next after we gather our raw data we are going to need to create objects out of them. Let’s start with muscles. Our muscles are an array of strings. We need to take each muscle from that array and instantiate it into an object, then push that new muscle instance into a class constant called &lt;code&gt;@@all&lt;/code&gt;. this is where all of our muscles will reside so we can reference them later. Going back to instantiating objects, like we learned earlier, A muscle has many exercises, so in our &lt;code&gt;initialtize&lt;/code&gt; method we are going to set an instance variable &lt;code&gt;@exercises&lt;/code&gt; set to equal an empty array. In other words every new muscle object that gets born will have an empty “pocket” for exercises to be added to it. Then we will push &lt;code&gt;self&lt;/code&gt; into &lt;code&gt;@@all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After our muscle objects are instantiated and pushed into that &lt;code&gt;@@all&lt;/code&gt; we are going to create make and add the exercises as objects using our scrape exercises scraper method. Let’s do this by reference each index in &lt;code&gt;@@all&lt;/code&gt; like so: &lt;code&gt;@@all[0].exercises = SCRAPED_EXERCISES[0].collect {|exercise| TrainHard::Exercise.new(exercise, @@all[0])}&lt;/code&gt;&amp;lt;/br&amp;gt;
Let’s break this code down. First we are referencing the first muscle that has been instantiated in &lt;code&gt;@@all[0]&lt;/code&gt; which happens to be Abs. Then we are calling the &lt;code&gt;.exercise =&lt;/code&gt; method created by our &lt;code&gt;attr_accessor :exercise&lt;/code&gt; and setting it equal to &lt;code&gt;SCRAPED_EXERCISES[0]&lt;/code&gt; which is reference our first array of arrays which contains a bunch of our exercises as strings. For each of those exercises we are instantiating a new exercise object and setting its name equal to the exercise and its muscle as the second argument equal to its corresponding muscle &lt;code&gt;#@@all[0]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! The bulk of our design structure is done. We now have muscle objects that have many exercises, and exercise objects that belong to muscles. We can implement this structure within the CLI and have the user obtain real object data if we wanted to add more features down the line.&lt;/p&gt;

</content>
 </entry>
 

</feed>
